-- P5 Plugin
-- by Jakup A. Knudsen - Kinovox Scandinavia ApS
-- July 2022

-- Information block for the plugin
PluginInfo = {
  Name = "Kinovox~P5 FNIP 8x16Av4",
  Version = "2.1.0",
  id = "com.jak.kvx.FNIP8x16Av4",
  BuildVersion = "0.340.35.1",
  Id = "c7b90369-7fc5-4831-bd17-fd5eb0a481e0",
  Author = "Jakup A. Knudsen",
  Description = "A plugin for controlling P5 FNIP8x16Av4 Ethernet relays"  
}

--Color Lookup Table
local BtnGrn    = { 0  , 199, 0   }
local BtnGrnOff = { 0  , 127, 0   }
local BtnGrnOn  = { 0  , 255, 0   }

--Define number of relays in device
local relayCount = 8

-- Logo
local p5Logo = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PCFET0NUWVBFIHN2ZyBQVUJMSUMgIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkIj48c3ZnIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjEwMCUiIHZpZXdCb3g9IjAgMCAxNDIgNTUiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxLjU7Ij48Zz48cGF0aCBkPSJNNi4zNjQsNDYuMzM2bDAuMDUzLC0zNS40MjFjMC4wNCwtMi4wNjggMS43MzcsLTQuNDk3IDQuMjMzLC00LjQ3OWw1MS4wNCwwLjEyOWM4LjYzNywwLjE2OSA5LjEzMSwxNC42MTggLTAuMDE5LDE1LjA5MWwtMzguMjMyLC0wLjAwNSIgc3R5bGU9ImZpbGw6bm9uZTtzdHJva2U6IzAwOTA5YTtzdHJva2Utd2lkdGg6N3B4OyIvPjxwYXRoIGQ9Ik00LjExNyw0Ni4zMzJjLTAuMDAyLDEuMjQyIDEuMDA1LDIuMjUyIDIuMjQ3LDIuMjU0YzEuMjQyLDAuMDAxIDIuMjUxLC0xLjAwNSAyLjI1MywtMi4yNDdjMC4wMDIsLTEuMjQyIC0xLjAwNSwtMi4yNTIgLTIuMjQ3LC0yLjI1M2MtMS4yNDEsLTAuMDAyIC0yLjI1MSwxLjAwNSAtMi4yNTMsMi4yNDZaIiBzdHlsZT0iZmlsbDojZmZmOyIvPjxwYXRoIGQ9Ik0yMy40MzgsMjMuOTAxYy0xLjI0MiwwIC0yLjI1LC0xLjAwOCAtMi4yNDksLTIuMjVjLTAsLTEuMjQyIDEuMDA4LC0yLjI1IDIuMjUsLTIuMjVjMS4yNDIsMCAyLjI1LDEuMDA5IDIuMjUsMi4yNTFjLTAuMDAxLDEuMjQxIC0xLjAwOSwyLjI0OSAtMi4yNTEsMi4yNDlaIiBzdHlsZT0iZmlsbDojZmZmOyIvPjxwYXRoIGQ9Ik02LjM2OSw0NC45ODZjMC4wMTMsLTkuNDIgMC4wNDgsLTM0LjA3MSAwLjA0OCwtMzQuMDcxYzAuMDQsLTIuMDY4IDEuNzM3LC00LjQ5NyA0LjIzMywtNC40NzlsNTEuMDQsMC4xMjljOC42MzcsMC4xNjkgOS4xMzEsMTQuNjE4IC0wLjAxOSwxNS4wOTFjMCwwIC0yNi45NjksLTAuMDAzIC0zNi44ODIsLTAuMDA0IiBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojZmZmO3N0cm9rZS13aWR0aDoxLjVweDsiLz48cGF0aCBkPSJNMTE3LjM5OSw2LjM2NGwtMzUuNzI0LDAuMDcyYy0xLjM3OCwwLjA0NiAtMi45MjQsMC44NTcgLTIuOTk0LDIuOTA3Yy0wLjAyNywwLjc3MiAtMC4yMzksMTIuMzcgLTAuMjM5LDEyLjM3bDQ2LjYyMywtMC4xNDhjMTIuNzc1LDEuMDc2IDE0LjI4NSwyMi45OTEgMC44MDUsMjUuMjI2bC0xMDIuNDYyLC0wIiBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojMDA5MDlhO3N0cm9rZS13aWR0aDo3cHg7Ii8+PHBhdGggZD0iTTExNy40MDMsOC42MThjMS4yNDIsLTAuMDAyIDIuMjQ4LC0xLjAxMiAyLjI0NiwtMi4yNTRjLTAuMDAzLC0xLjI0MiAtMS4wMTMsLTIuMjQ4IC0yLjI1NSwtMi4yNDZjLTEuMjQxLDAuMDAzIC0yLjI0OCwxLjAxMyAtMi4yNDUsMi4yNTVjMC4wMDIsMS4yNDEgMS4wMTIsMi4yNDggMi4yNTQsMi4yNDVaIiBzdHlsZT0iZmlsbDojZmZmOyIvPjxwYXRoIGQ9Ik0yMy43ODEsNDguOTU4Yy0xLjI0MiwtMC4wMDEgLTIuMjQ5LC0xLjAxIC0yLjI0OCwtMi4yNTJjMC4wMDEsLTEuMjQxIDEuMDEsLTIuMjQ5IDIuMjUxLC0yLjI0OGMxLjI0MiwwLjAwMSAyLjI1LDEuMDEgMi4yNDksMi4yNTJjLTAuMDAxLDEuMjQyIC0xLjAxLDIuMjQ5IC0yLjI1MiwyLjI0OFoiIHN0eWxlPSJmaWxsOiNmZmY7Ii8+PHBhdGggZD0iTTExNi4wNDksNi4zNzFjLTkuNDc0LDAuMDE4IC0zNC4zNzQsMC4wNjUgLTM0LjM3NCwwLjA2NWMtMS4zNzgsMC4wNDYgLTIuOTI0LDAuODU3IC0yLjk5NCwyLjkwN2MtMC4wMjcsMC43NzIgLTAuMjM5LDEyLjM3IC0wLjIzOSwxMi4zN2w0Ni42MjMsLTAuMTQ4YzEyLjc3NSwxLjA3NiAxNC4yODUsMjIuOTkxIDAuODA1LDI1LjIyNmMwLC0wIC04Mi4zNzQsLTAuMDY3IC0xMDAuNzM3LC0wLjA4MiIgc3R5bGU9ImZpbGw6bm9uZTtzdHJva2U6I2ZmZjtzdHJva2Utd2lkdGg6MS41cHg7Ii8+PC9nPjwvc3ZnPg=="


--Kinovox Logo
local kvxLogo = ""

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 8, 167, 225 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "FNIP-8x16A, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages

PageNames = { "Control", "Setup" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}

  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}

  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}

  table.insert(ctrls, {
    Name = "ConnectButton", 
    ControlType = "Button", 
    ButtonType = "Toggle", 
    Count = 1, 
    UserPin = false })

  table.insert(ctrls, {
    Name = "RelayControlButtons", 
    ControlType = "Button",
    ButtonType = "Toggle", 
    Count = relayCount, 
    UserPin = true, 
    PinStyle = "Both"})

  table.insert(ctrls, {
    Name = "ContactClosureIndicators", 
    ControlType = "Indicator", 
    IndicatorType = "Led", 
    Count = relayCount, 
    UserPin = true, 
    PinStyle = "Output"})

  table.insert(ctrls, {
    Name = "SetMomentaryTime", 
    ControlType = "Knob", 
    ControlUnit = "Integer", 
    Min = 0, 
    Max = 999, 
    Count = relayCount, 
    UserPin = true, 
    PinStyle = "Input"})

  table.insert(ctrls, {
    Name = "IPAddress", 
    ControlType = "Text", 
    Count = 1, 
    UserPin = false})

  table.insert(ctrls, {
    Name = "Port", 
    ControlType = "Knob",
    ControlUnit = "Integer", 
    DefaultValue = 7078,
    Min = 0,
    Max = 65535,
    Count=1,
    UserPin = false})

  table.insert(ctrls, {
    Name = "Status",
    ControlType="Indicator",
    IndicatorType = "StatusGP" or "Status",
    IsReadOnly=true,
    Count=1,})

  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]

  -- Control Page
  if CurrentPage == "Control" then

    table.insert(graphics,{
        Type = "GroupBox",
        Text = "Control",
        Fill = {200,200,200,0},
        StrokeWidth = 1,
        Position = {5,5},
        Size = {500,200},
        HTextAlign = "Left",
        FontSize = 12,
        Radius = 10,
        IsReadOnly = true})

    table.insert(graphics,{
        Type = "Text",
        Text = "Contact Closures:",
        Position = {10,42},
        Size = {90,26},
        FontSize = 12,
        HTextAlign = "Right",
        IsReadOnly = true})

    table.insert(graphics,{
        Type = "Text",
        Text = "Activate Relay:",
        Position = {10,92},
        Size = {90,16},
        FontSize = 12,
        HTextAlign = "Right",
        IsReadOnly = true})

    table.insert(graphics,{
        Type = "Text",
        Text = "Momentary Value:",
        Position = {10,125},
        Size = {90,26},
        FontSize = 12,
        HTextAlign = "Right",
        WordWrap = true,
        IsReadOnly = true})

    table.insert(graphics,{
        Type = "Svg",
        Image = p5Logo,
        Position = {110,160},
        Size = {90,29}})

    table.insert(graphics,{
        Type = "Text",
        Text = "FNIP-8x16A.v4",
        Position = { 210, 110 },
        Size = { 150, 79 },
        HTextAlign = "Left",
        VTextAlign="Bottom",
        FontSize = 14 })


        --Insert Controls

  for i = 1, relayCount do
    layout["ContactClosureIndicators "..i] = 
    {
        PrettyName = "Contact Closure~Input "..i.." Status",
        Position = {70 + i * 45, 45},
        Size = { 20, 20 },
        Color = { 129, 255, 13 },
        OffColor = { 255, 13, 17 },
        Margin = 3,
        Radius = 0,
        Style = "Led",
        --UnlinkOffColor = false,
        IsReadOnly = true
    }

    layout["RelayControlButtons "..i] = 
    {
        PrettyName = "Relay Control~Toggle Relay "..i,
        Style = "Button",
        Position = {65 + i * 45, 92},
        Size = {35,16},
        Color = BtnGrn,
        OffColor = BtnGrnOff, 
        Margin = 0,
        Legend = tostring(i), 
        FontSize = 10
    }

    layout["SetMomentaryTime "..i] ={
        PrettyName = "Momentary Value~Relay "..i.." Value",
        Style = "TextField",
        ShowTextBox = true,
        Position = {65 + i * 45, 128},
        Color = {110,198,241},
        Size = {35, 20},
        Legend = "0", 
        FontSize = 12}
  end

-- Setup Page
  elseif CurrentPage == "Setup" then
    --Connection Group Box
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "Connection",
    Fill = {200,200,200,0},
    StrokeWidth = 1,
    Position = {5,5},
    Size = {280,250},
    HTextAlign = "Left",
    FontSize = 12,
    Radius = 10})

  table.insert(graphics,{
    Type = "Text",
    Text = "IP Address:",
    Position = {10,42},
    Size = {90,16},
    FontSize = 14,
    HTextAlign = "Right",})

  table.insert(graphics,{
    Type = "Text",
    Text = "Port:",
    Position = {10,68},
    Size = {90,16},
    FontSize = 14,
    HTextAlign = "Right",})
  
  table.insert(graphics,{
    Type = "Text", 
    Text = "Developed by \rJakup A. Knudsen", 
    Position = {105, 210},Size = {145,35},
    FontSize = 10,HTextAlign = "Center",
    IsReadOnly = true})

  table.insert(graphics,{
    Type = "Svg",
    Image = kvxLogo,
    Position = {110,180},
    Size = {145,35},
    IsReadOnly = true})

  layout["IPAddress"] = {
    PrettyName = "IP Address",
    Position = {105, 42}, 
    Size = {150, 22}, 
    Color = {255,255,255} }

  layout["Port"] = {
    PrettyName = "Port",
    Position = {105, 68}, 
    Size = {150, 22},
    Color = {255,255,255},
    Value = "7078" }

  layout["ConnectButton"] = {
    PrettyName = "Connect to Device",
    Style = "Button",
    Position = {105,98},
    Size = {150,35},
    Color = BtnGrn, 
    OffColor=BtnGrnOff,
    Legend = "Connect",
    FontSize = 12}

  layout["Status"]={
    PrettyName="Device's Connection Status",
    Style="Textdisplay",
    FontSize=10,
    Color={255,255,255},
    IsReadOnly=true,
    Position={105,143},
    Size={150,28}}

  end
  return layout, graphics
end

--Start event based logic
if Controls then

  P5Relay      = TcpSocket.New()
  PollTimer    = Timer.New()

  --Timer for automatic reconnect
  timer = Timer.New()
  time = 30

  isConnected  = false
  statusBar    = Controls.Status

  CCInOn        = 'FN,IN,ON,'
  CCInOff       = 'FN,IN,OFF,'
  RelayOutOn    = 'FN,OUT,ON,'
  RelayOutOff   = 'FN,OUT,OFF,'
  startMessage  = 'FN,'

  status_state = {OK=0,COMPROMISED=1,FAULT=2,NOTPRESENT=3,MISSING=4,INITIALIZING=5}


  ----------- functions -----------------------

  function IsAlive(address)
    P5Ping = Ping.New(address)
    P5Ping:start(false)
    P5Ping:setPingInterval(5.0)
    --P5Ping:setTimeoutInterval(6.0)
    print("Ping Initiated")

    P5Ping.EventHandler = function(response)

      if response.ElapsedTime == "Time exceeded." then
        P5Ping:stop()
        reconnect()
      end
    end
    
    P5Ping.ErrorHandler = function(response)

      if response.Error == "Time exceeded." then
        P5Ping:stop()
        reconnect()
      elseif isConnected == false then
        P5Ping:stop()
      end
    end
  end

  function reconnect()
    if Controls.IPAddress.String ~= '' then 
      P5Relay:Connect(Controls.IPAddress.String, tonumber(Controls.Port.String))

      Controls.ConnectButton.Boolean = true 
      startTimer()
      ReportStatus("COMPROMISED", "Attempting to reconnect")
    else
      P5Relay:Disconnect()
      Controls.ConnectButton.Boolean = false
      ReportStatus("MISSING","Relay disconnected")
    end
  end 


function ButtonStateChange()
  print("Button State Change")
  for i = 1, #Controls.RelayControlButtons do
    if isConnected == true then
      Controls.RelayControlButtons[i].IsDisabled = false
      Controls.SetMomentaryTime[i].IsDisabled = false
    else
      Controls.RelayControlButtons[i].IsDisabled = true
      Controls.SetMomentaryTime[i].IsDisabled = true
    end
  end
end

function ReportStatus(state,msg)
  statusBar.Value = status_state[state]
  statusBar.String = msg
end




  ----------- Relay Control ----------------------------


  for relayNo = 1 , #Controls.RelayControlButtons do 
    Controls.RelayControlButtons[relayNo].EventHandler = function()
      if isConnected == true then
      -- Check relay state
       if Controls.RelayControlButtons[relayNo].Boolean == true then 
         if Controls.SetMomentaryTime[relayNo].Value >= 1 then 
           -- If momentary value is set then add to message
         send(relayNo, 'MON, ', Controls.SetMomentaryTime[relayNo].Value)
         else 
           -- If not, send without momentary value
           send(relayNo, 'ON, ')
         end 
       else 
         send(relayNo, 'OFF, ')
       end 
      else
        Controls.RelayControlButtons[relayNo].Boolean = false
        print("Device Not Connected")
      end
     end 
  end 


  -- Send commands
  function send(number, state, momentaryValue)
  --Check if momentary value is enabled or not
     if momentaryValue ~= nil then
       --Add momentary value to package and send
       message = (startMessage..state..tostring(number)..', '..tostring(momentaryValue)..'\r')
       P5Relay:Write(message)
     else 
       -- Send command without momentary value
       message = (startMessage..state..tostring(number)..'\r')
       P5Relay:Write(message)
     end 
  end 


  -- Check 1st run state of relays
  function checkRelayState()
    P5Relay:Write('FN,SRE\r') --Relay outputs
    P5Relay:Write('FN,SRI\r') --Contact Closure Inputs
  end 

  ----------- Socket Callbacks -------------------------

  P5Relay.Connected = function()
    -- Once connected, GET relay status from device
    isConnected = true
    checkRelayState()
    ButtonStateChange()
    Controls.ConnectButton.Legend = "Disconnect"
    ReportStatus("OK", "Device Connected")
    IsAlive(Controls.IPAddress.String)
    timer:Stop()
    time = 30
  end 


  -- Read data from device
  P5Relay.Data = function()
  for i = 1, #Controls.RelayControlButtons do
  -- Message processing
      local message = P5Relay:ReadLine(TcpSocket.EOL.Custom, '\n\r>')

      if message == nil then 
      --No message is received
      else 
      -- Strip '>' from message
      local strippedMsg = message:gsub('%>', '')
      -- find sourcenumber in data
      local sourceNumber = tonumber(string.sub(strippedMsg, -1))
        if strippedMsg == tostring(RelayOutOn..sourceNumber) then 
          -- Set relay control state
          Controls.RelayControlButtons[sourceNumber].Boolean = true 
        elseif strippedMsg == tostring(RelayOutOff..sourceNumber) then 
          -- Set relay control state
          Controls.RelayControlButtons[sourceNumber].Boolean = false 
        elseif  strippedMsg == tostring(CCInOn..sourceNumber) then 
          -- Set Contact Closure On
          Controls.ContactClosureIndicators[sourceNumber].Boolean = true 
        elseif strippedMsg == tostring(CCInOff..sourceNumber) then 
          -- Set Contact Closure Off
          Controls.ContactClosureIndicators[sourceNumber].Boolean = false 
        end 
      end
    end
  end


  P5Relay.Error = function()
    print('Error occurred', error)
    P5Relay:Disconnect()
    Controls.ConnectButton.Boolean = false
    ButtonStateChange()
    isConnected = false
    Controls.ConnectButton.Legend = "Connect"
    ReportStatus("FAULT","Device disconnected due to an unknown error.\n Attempting to reconnect.")
    P5Ping:stop()
  end 


  P5Relay.Closed = function()
    print("socket was closed")
  end



  ------------- Eventhandlers -------------------------------


  Controls.ConnectButton.EventHandler = function()
    if Controls.ConnectButton.Boolean == true and Controls.IPAddress.String ~= '' then 
      P5Relay:Connect(Controls.IPAddress.String, Controls.Port.Value)
      print(P5Relay)
      ReportStatus("INITIALIZING", "Trying To Connect")
    else
      P5Relay:Disconnect()
      Controls.ConnectButton.Boolean = false 
      Controls.ConnectButton.Legend = "Connect"
      ReportStatus("COMPROMISED","Relay disconnected")
      isConnected = false
      ButtonStateChange()
    end 
  end 

  timer.EventHandler = function()
    if time > 0 then 
      time = time - 1
      ReportStatus("COMPROMISED",'Attempting re-connect in '..tostring(time)..' seconds')
    else 
      timer:Stop()
      time = 30
      reconnect()
    end
    --print(time)
  end 
  
  function startTimer()
    timer:Start(1)
  end

  P5Relay:Disconnect()
  ButtonStateChange()
  Controls.ConnectButton.Boolean = false
  statusBar.String = ''
  ReportStatus("FAULT", "IP Address Missing")
  reconnect()
end