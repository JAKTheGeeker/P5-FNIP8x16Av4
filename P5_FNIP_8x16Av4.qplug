-- P5 Plugin creation
-- by Jakup A. Knudsen - Kinovox Scandinavia ApS
-- July 2022

-- Information block for the plugin
PluginInfo = {
  Name = "JAK.The.Geeker~P5 FNIP 8x16Av4",
  Version = "0.0.1",
  id = "com.jak.kvx.FNIP8x16Av4",
  BuildVersion = "0.0.0.1",
  Id = "c7b90369-7fc5-4831-bd17-fd5eb0a481e0",
  Author = "Jakup A. Knudsen",
  Description = "A very basic plugin"  
}

--Define number of relays in device
local relayCount = 8

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 100, 255, 120 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "FNIP 8x16A v4, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages

PageNames = { "Control", "Setup" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  table.insert(properties,{
    Name = "IP Address", 
    Type = "string", 
    Value = "0.0.0.0"
  })
  table.insert(properties,{
    Name = "Port", 
    Type = "integer", 
    Value = "7078"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}

  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}

  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}

  table.insert(ctrls, {Name = "ConnectButton", ControlType = "Button", ButtonType = "Toggle", Count = 1, UserPin = false })
  table.insert(ctrls, {Name = "RelayControlButtons", ControlType = "Button", ButtonType = "Toggle", Count = relayCount, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "SetMomentaryTime", ControlType = "Knob", ControlUnit = "Integer", Min = 0, Max = 100, Count = relayCount, UserPin = false})
  table.insert(ctrls, {Name = "IPAddress", ControlType = "Text", Count = 1, UserPin = false})
  table.insert(ctrls, {Name = "Port", ControlType = "Text", Count = 1, UserPin = false})
  table.insert(ctrls, {Name="Status",ControlType="Indicator",IndicatorType = Reflect and "StatusGP" or "Status",IsReadOnly=true,Count=1,})
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]

  -- Control Page
  if CurrentPage == "Control" then

    table.insert(graphics,{Type = "GroupBox",Text = "Control",Fill = {200,200,200,0},StrokeWidth = 1,Position = {5,5},Size = {550,150},HTextAlign = "Left",FontSize = 12,Radius = 10})
    table.insert(graphics,{Type = "Text",Text = "Activate Relay:",Position = {10,42},Size = {90,16},FontSize = 12,HTextAlign = "Right",})
    table.insert(graphics,{Type = "Text",Text = "Momentary Value:",Position = {10,75},Size = {90,26},FontSize = 12,HTextAlign = "Right",WordWrap = true})

  for i = 1, relayCount do
    layout["RelayControlButtons "..i] = {PrettyName = "Toggle Relay",Style = "Button",Position = {65 + i * 45, 42},Size = {35,16},Color = {102,102,156},Margin = 0,Legend = tostring(i), FontSize = 10}
    layout["SetMomentaryTime "..i] ={PrettyName = "Value",Style = "TextField",ShowTextBox = true,Position = {65 + i * 45, 78},Color = {110,198,241},Size = {35, 20},Legend = "0", FontSize = 12}
  end

  
-- Setup Page
  elseif CurrentPage == "Setup" then
    --Connection Group Box
  table.insert(graphics,{Type = "GroupBox",Text = "Connection",Fill = {200,200,200,0},StrokeWidth = 1,Position = {5,5},Size = {280,180},HTextAlign = "Left",FontSize = 12,Radius = 10})
  table.insert(graphics,{Type = "Text",Text = "IP Address:",Position = {10,42},Size = {90,16},FontSize = 14,HTextAlign = "Right",})
  table.insert(graphics,{Type = "Text",Text = "Port:",Position = {10,68},Size = {90,16},FontSize = 14,HTextAlign = "Right",})

  layout["IPAddress"] = {PrettyName = "IP Address",Position = {105, 42}, Size = {150, 22}, Color = {255,255,255} }
  layout["Port"] = {PrettyName = "Port",Position = {105, 68}, Size = {150, 22}, Color = {255,255,255},Legend = "7078" }
  layout["ConnectButton"] = {PrettyName = "Connect to Device",Style = "Button",Position = {105,98},Size = {150,35},Color = {102,102,156},Legend = "Connect",FontSize = 12}
  layout["Status"]={PrettyName="Device's Connection Status",Style="Textdisplay",FontSize=14,Color={255,255,255},IsReadOnly=true,Position={105,143},Size={150,28}}

  end
  return layout, graphics
end

--Start event based logic
if Controls then

P5Relay = TcpSocket.New()
PollTimer = Timer.New()

infoBar = Controls.Status

RelayOutOn   = 'FN,OUT,ON,'
RelayOutOff  = 'FN,OUT,OFF,'
startMessage     = 'FN,'

----------- functions -----------------------


function reconnect()
  if Controls.IPAddress.String ~= '' then 
    P5Relay:Connect(Controls.IPAddress.String, tonumber(Controls.Port.String))
    print(P5Relay)
    Controls.Connect.Boolean = true 
    infoBar.String = 'Attempting reconnect'
  else
    P5Relay:Disconnect()
    Controls.Connect.Boolean = false 
    infoBar.String = 'Relay disconnected'
  end
end 


----------- Relay Control ----------------------------


for relayNo = 1 , #Controls.relayControl do 
  Controls.relayControl[relayNo].EventHandler = function()
    -- Check relay state
    if Controls.relayControl[relayNo].Boolean == true then 
      if Controls.momentary[relayNo].Value >= 1 then 
        -- If momentary value is set then add to message
       send(relayNo, 'MON, ', Controls.momentary[relayNo].Value)
      else 
        -- If not, send without momentary value
        send(relayNo, 'ON, ')
      end 
    else 
      send(relayNo, 'OFF, ')
    end 
  end 
end 


-- Send commands
function send(number, state, momentaryValue)
--Check if momentary value is enabled or not
  if momentaryValue ~= nil then
    --Add momentary value to package and send
    message = (startMessage..state..tostring(number)..', '..tostring(momentaryValue)..'\r')
    P5Relay:Write(message)
  else 
    -- Send command without momentary value
    message = (startMessage..state..tostring(number)..'\r')
    P5Relay:Write(message)
  end 
end 


-- Check 1st run state of relays
function checkRelayState()
  P5Relay:Write('FN,SRE\r')
end 

----------- Socket Callbacks -------------------------


P5Relay.Connected = function()
  print('socket is connected')
  infoBar.String = 'Device Connected'
  -- Once connected, GET relay status from device
  checkRelayState()
end 

-- Read data from device
P5Relay.Data = function()
for i = 1, #Controls.relay do
-- Message processing
    local message = P5Relay:ReadLine(TcpSocket.EOL.Custom, '\n\r>')

    if message == nil then 
    else 
    -- Strip '>' from message
    local strippedMsg = message:gsub('%>', '')
    -- find sourcenumber in data
    local sourceNumber = tonumber(string.sub(strippedMsg, -1))
    if strippedMsg == tostring(RelayOutOn..sourceNumber) then 
      -- Trigger Relay LED number
      Controls.relay[sourceNumber].Boolean = true
      -- Set relay control state
      Controls.relayControl[sourceNumber].Boolean = true 
    elseif strippedMsg == tostring(RelayOutOff..sourceNumber) then 
      -- Trigger Relay LED number
      Controls.relay[sourceNumber].Boolean = false
      -- Set relay control state
      Controls.relayControl[sourceNumber].Boolean = false 
    end 
    end
    end
end


P5Relay.Error = function()
  print('Error occurred', error)
  P5Relay:Disconnect()
  Controls.Connect.Boolean = false
  infoBar.String = 'Device disconnected due to an unknown error.\n Attempting to reconnect.'
end 


------------- Eventhandlers -------------------------------


Controls.Connect.EventHandler = function()
  if Controls.Connect.Boolean == true and Controls.IPAddress.String ~= '' then 
    P5Relay:Connect(Controls.IPAddress.String, tonumber(Controls.Port.String))
    print(P5Relay)
    infoBar.String = 'Trying to connect'
  else
    P5Relay:Disconnect()
    Controls.Connect.Boolean = false 
    infoBar.String = 'Relay disconnected'
  end 
end 


P5Relay:Disconnect()
Controls.Connect.Boolean = false
infoBar.String = ''
reconnect()
  end
end